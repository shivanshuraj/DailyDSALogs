// This is my own code but not optimised.

/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {
    HashMap<ListNode, Integer> map = new HashMap<>();

    public boolean hasCycle(ListNode head) {
        ListNode curr = head;
        while (curr != null) {
            if (map.containsKey(curr)) {
                map.put(curr, map.get(curr) - 1);
                break;
            } else {
                map.put(curr, 1);
            }
            curr = curr.next;

            

        }
        for (Map.Entry<ListNode, Integer> mapEntry : map.entrySet()) {
                if (mapEntry.getValue() <= 0) {
                    return true;
                }
            }
        return false;
    }
}
